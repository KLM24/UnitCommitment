""" Historical analysis of Nominal Problem

Compares solving the nominal problem each day with reserves against the random forest predictions

"""
import pdb, csv, numpy, sys
import generator, buildNom, summarize

tag1 = sys.argv[1]
print tag1

gen_dict = generator.doEverything()
load_ratio = 1.0
TMSR_REQ = (1.245 * .5)
T10_REQ = (1.245)
T30_REQ = (1.245 + .5 * 1.237)
#TMSR_REQ = T10_REQ = T30_REQ = 0.

#thin the example
#gen_dict, load_ratio = generator.smallTestCase( gen_dict_, filt_percent = .1 )

# Set up the output files
file_out_costs = csv.writer(open(tag1 + "_costs.csv", "w"))
file_out_costs.writerow(["Date", "Fixed", "PredVarible", "RealVariable", "HindFixed", "HindVariable"])

file_out = csv.writer(open(tag1 + "_sched.csv", "w"))
file_out.writerow([ "Date", "Type"] + ["H" + str(ix + 1) for ix in range(24) ] )

file_out2 = csv.writer(open(tag1 + "_hind_sched.csv", "w"))
file_out2.writerow([ "Date", "Type"] + ["H" + str(ix + 1) for ix in range(24) ] )

print "Num Generators:\t", len(gen_dict)
for iType in ("Steam", "CT", "Diesel", "Hydro", "Nuclear", "FixedImport"):
    print iType, len( filter( lambda g: g.fuel_type == iType, gen_dict.values() ) )

print "\n Capacity Requirements:"
print TMSR_REQ, T10_REQ, T30_REQ

print "\n Load Ratio:\t", load_ratio

#build the model for the second stage stuff
UC2obj =  buildNom.__buildNomNoLoad(gen_dict, TMSR_REQ, T10_REQ, T30_REQ, False, False)

##VG DEBUG
UC2obj.model.params.mipgap = 5e-3

file_loads = csv.reader(open("../load_validate.csv", "rU") ) 
file_loads.next() # burn one for the header

#Load up the predictions
file_pred_loads = csv.reader(open("../forestFit.csv", "rU") )
file_pred_loads.next() #burn one for the header

# for each day in the validation set,
old_objs = []
for ix, (line, line_pred) in enumerate(zip(file_loads, file_pred_loads)):
    if "NA" in line:
        raise ValueError()
    loads = [float(l) * 1e-3 * load_ratio for l in line[2:26] ]
    preds = [float(l) * 1e-3 * load_ratio for l in line_pred[2:26] ]

    # Solve Nominal model against predictions
    on_vals_init, start_vals_init, fixed_cost_init, tot_cost_init, prod_by_hr, variable_costs = \
            buildNom.buildSolveNom(gen_dict, TMSR_REQ, T10_REQ, T30_REQ, preds)

    #write out just once the planned production
    file_out_planned = csv.writer(open(tag1 + "_plan.csv", "w"))
    file_out_planned.writerow([ "Date", "Type"] + ["H" + str(ix + 1) for ix in range(24) ] )
    summarize.writeHourlySchedCap(file_out_planned, "Planned", on_vals_init, gen_dict)

    #use those dispatch decisions to solve second stage against true loads
    on_vals, start_vals, fixed_cost, tot_cost, prod_by_hr, variable_costs = buildNom.updateSolveSecondStage(
            UC2obj, loads, gen_dict, on_vals_init, start_vals_init )

    # dump the realized generation scheme including slacks....
    dt = line[1]
    summarize.writeHourlyGens(file_out, dt, prod_by_hr)

    #Solve the hindsight problem
    on_vals_hind, start_vals_hind, fixed_cost_hind, tot_cost_hind, prod_by_hr_hind, var_costs_hind =  \
            buildNom.buildSolveNom(gen_dict, TMSR_REQ, T10_REQ, T30_REQ, loads)
    summarize.writeHourlyGens(file_out2, dt, prod_by_hr_hind)

    file_out_costs.writerow([dt, fixed_cost_init, tot_cost_init - fixed_cost_init, tot_cost - fixed_cost, 
                                                        fixed_cost_hind, tot_cost_hind - fixed_cost_hind] )

print "Cost Summary:"
print dt, ":\t", 
print (" %.2f" * 5) % (fixed_cost_init, tot_cost_init - fixed_cost_init, tot_cost - fixed_cost, 
                                                        fixed_cost_hind, tot_cost_hind - fixed_cost_hind)