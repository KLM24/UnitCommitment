ggtitle(f_date)
ggplot(aes(x=Type, y=H1, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle(f_date)
f_date = "2011-07-29"
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("29 July 2011 H13") +
xlab("") + ylab("") + ylim(0, 2.3)
f_date = "2011-07-29"
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("29 July 2011 H13") +
xlab("") + ylab("") + ylim(0, 2.5)
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("29 July 2011 H13") +
xlab("") + ylab("")
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("29 July 2011 H13") +
xlab("") + ylab("")
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("H13") +
xlab("") + ylab("")
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("1:00 PM") +
xlab("") + ylab("")
ggplot(aes(x=Type, y=H1, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("1:00 PM") +
xlab("") + ylab("")
ggplot(aes(x=Type, y=H1, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("1:00 PM") +
xlab("") + ylab("") +
scale_fill_manual(values= c("#999999", "#E69F00"))
scale_color_hue
scale_color_hue()
?hue_pal
hue_pal
ggplot(aes(x=Type, y=H1, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("1:00 PM") +
xlab("") + ylab("") +
scale_fill_manual(values= c("#69B946", "#759AFD"))
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("1:00 PM") +
xlab("") + ylab("") +
scale_fill_manual(values= c("#69B946", "#759AFD"))
ggplot(aes(x=Type, y=H13, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("12:00 PM") +
xlab("") + ylab("") +
scale_fill_manual(values= c("#69B946", "#759AFD"))
ggplot(aes(x=Type, y=H1, fill=Method),
data=subset(sched, as.character(Date) ==f_date & !( Type %in% c("Wind"))) ) +
geom_bar(stat="identity", position="dodge") +
theme_minimal(base_size=18) +
theme(legend.position=c(.2, .8),
legend.title=element_blank()) +
ggtitle("12:00 AM") +
xlab("") + ylab("") +
scale_fill_manual(values= c("#69B946", "#759AFD"))
library(gdata)
library(reshape)
setwd("/Users/VGupta/Documents/Research/UnitCommittment/ISO-NE/")
setwd("/Users/VGupta/Documents/Research/UnitCommittment/UnitCommitment/ISO-NE/")
load_hist.orig = read.csv('load_hist_orig2.csv')
load_hist.orig$dateTime <- as.POSIXct(load_hist.orig$dateTime)
load_hist.orig <- load_hist.orig[order(load_hist.orig$Date, load_hist.orig$Hour) , ]
load.summer <- subset(load_hist.orig, months(dateTime) %in% c("June", "July", "August") &
!isWkEnd )
dim(load.summer$Date)
length(load.summer$Date)
load.summer$Date[17532]
load.summer$Date[17352]
ggplot(aes(x=DryBulb, y=DEMAND * 1e-3), data=load.train) +
geom_point() + geom_smooth(size=1.5, color="red") +
xlab("Drybulb Temperature (F)") +
ylab("System Demand (GWhr)") +
theme_minimal(base_size=16)
load.train$Date[1]
names(load.train)
ggplot(aes(x=DryBulb, y=DEMAND * 1e-3), data=subset(load.train, Hour==13) +
geom_point() + geom_smooth(size=1.5) +
xlab("Drybulb Temperature (F)") +
ylab("System Demand (GWhr)") +
theme_minimal(base_size=20)
ggplot(aes(x=DryBulb, y=DEMAND * 1e-3), data=subset(load.train, Hour==13)) +
geom_point() + geom_smooth(size=1.5) +
xlab("Drybulb Temperature (F)") +
ylab("System Demand (GWhr)") +
theme_minimal(base_size=20)
ggplot(aes(x=DryBulb, y=DEMAND * 1e-3), data=subset(load.train, Hour==13)) +
geom_point() + geom_smooth(size=1.5) +
xlab("Temperature (F)") +
ylab("Demand (GWhr)") +
theme_minimal(base_size=20)
ggplot(aes(x=DryBulb, y=DEMAND * 1e-3), data=subset(load.train, Hour==13)) +
geom_point() + geom_smooth(size=1.5) +
xlab("Temperature (F)") +
ylab("Demand (GWhr)") +
theme_minimal(base_size=20) +
ggtitle("12:00 PM")
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train) +
geom_line(alpha=.2) +
ylab("System Demand (GWhr)") +
theme_minimal(base_size=16)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train) +
geom_line(alpha=.2) +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:20, ]) +
geom_line(alpha=.2) +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:200, ]) +
geom_line(alpha=.2) +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=.2) +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1) +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1, color="blue") +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
? geom_smooth
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1, color="#294EFF") +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1, color="#294EFF") +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1, color="#294EFF") +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(5, 24)
ggplot(aes(x=Hour, y=DEMAND * 1e-3, group=Date), data=load.train[1:2000, ]) +
geom_line(alpha=1, color="#294EFF") +
ylab("(GWhr)") +
theme_minimal(base_size=20) +
ggtitle("System Demand") +
xlim(1, 24)
makeHourly = function(load_data)
{
load.hour = cast(Date~Hour, data = load_data, value="DEMAND")
drybulb.hour = cast(Date~Hour, data=load_data, value="DryBulb")
dewpnt.hour = cast(Date~Hour, data = load_data, value="DewPnt")
names(load.hour) = paste("Load", names(load.hour), sep="")
names(drybulb.hour) = paste("Dry", names(drybulb.hour), sep="")
names(dewpnt.hour) = paste("Dew", names(dewpnt.hour), sep="")
load.hour = cbind(load.hour,
drybulb.hour[, 2:25],
dewpnt.hour[, 2:25])
}
load.validate.hour = makeHourly(load.validate)
load.train.hour = makeHourly(load.train)
mean_load = colMeans(load.train.hour[, 2:25])
sd_loads = apply(load.validate.hour[,2:25], MARGIN=2, FUN=sd)
predictHourly = function(fitted_regs, load.hour)
{
pred.hour = load.hour[, 1:25]
for(i in 1:24)
{
pred.hour[, i+1] <- predict(fitted_regs[[i]], load.hour)
}
return(pred.hour)
}
mse= function(sim, obs)
{
filt = is.na(sim) | is.na(obs)
mean((sim[!filt] - obs[!filt])^2)
}
MSEHourly = function(load.hour, pred.hour)
{
out = rep(0, 24)
for(ix in 1:24)
{
out[ix] <- mse(load.hour[, ix], pred.hour[, ix])
}
return(out)
}
library(rpart)
library(rpart.plot)
fitTreeFun = function( load_col )
{
trial_tree = rpart(Load ~ ., method="anova",
data=cbind(Load = load_col,
load.train.hour[, -(1:25)]),
cp=0, xval=10)
#try to identify
min_error = min(trial_tree$cptable[, "xerror"])
min_indx = which(abs(trial_tree$cptable[, "xerror"] - min_error) < 1e-6)
min_indx = as.numeric(min_indx[1])
min_error_p = min_error + trial_tree$cptable[min_indx, "xstd"]
min_indx = which(trial_tree$cptable[, "xerror"] - min_error_p < 1e-6)
min_indx = as.numeric(min_indx[1])
return(prune(trial_tree, cp = trial_tree$cptable[min_indx, "CP"]))
}
fittedTrees = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitTreeFun)
tree_preds = predictHourly(fittedTrees, load.validate.hour)
load.validate.hour = makeHourly(load.validate)
load.validate <- subset(load.summer, as.Date(Date) >= "2010-07-09"  )
load.train <- subset( load.summer, as.Date(Date) < "2010-07-09")
rm(load_hist.orig, load.summer)
load.validate.hour = makeHourly(load.validate)
load.train.hour = makeHourly(load.train)
mean_load = colMeans(load.train.hour[, 2:25])
sd_loads = apply(load.validate.hour[,2:25], MARGIN=2, FUN=sd)
fittedTrees = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitTreeFun)
library(randomForest)
fitForestFun = function(load_col)
{
fit <- randomForest(Load ~ .,
data=cbind(Load=load_col,
load.train.hour[, -(1:25)]))
return(fit)
}
fittedForests = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitForestFun)
forest_preds = predictHourly(fittedForests, load.validate.hour)
fitForestFun = function(load_col)
{
fit <- randomForest(Load ~ .,
data=cbind(Load=load_col,
load.train.hour[, -(1:25)]))
return(fit)
}
fittedForests = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitForestFun)
summary(load.train.hour[, -(1:25)])
load.train.hour = load.train.hour[ ! is.na( load.train.hour$Load13), ]
summary(load.train.hour[, -(1:25)])
fittedForests = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitForestFun)
load.train.hour = load.train.hour[ ! is.na( load.train.hour$Dew24), ]
summary(load.train.hour[, -(1:25)])
forest_preds = predictHourly(fittedForests, load.validate.hour)
fittedForests = apply(load.train.hour[, 2:25], MARGIN=2, FUN=fitForestFun)
forest_preds = predictHourly(fittedForests, load.validate.hour)
forest_resids = data.frame(LoadDate = load.validate.hour$LoadDate,
load.validate.hour[, 2:25] - forest_preds[, -1])
names(forest_resids)
mean_resids = colMeans(forest_resids[-1])
cov_resids = cov(forest_resids[-1])
dim(cov_resids)
mean_resids
mean_resids = colMeans(forest_resids[-1], na.rm=TRUE)
cov_resids = cov(forest_resids[-1], use="pairwise")
mean_resids
cov_resids[1:3, 1:3]
rep(0, 3)
? "for"
kappa = sqrt( 1 - 1/.1)
kappa = sqrt( 1/.1 - 1)
kappa
for (i in 1:24)
{
ups[i] += 3 * sqrt( cov_resids[i, i])
downs[i] -= 3 * sqrt(cov_resids[i, i])
}
for (i in 1:24)
{
ups[i] = ups[i] +  3 * sqrt( cov_resids[i, i])
downs[i] =downs[i] - 3 * sqrt(cov_resids[i, i])
}
ups = mean_resids
downs = mean_resids
kappa = sqrt( 1/.1 - 1)
for (i in 1:24)
{
ups[i] = ups[i] +  3 * sqrt( cov_resids[i, i])
downs[i] =downs[i] - 3 * sqrt(cov_resids[i, i])
}
plot(ups[i])
plot(ups)
mean_resids
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs) )
dat.ucs
ggplot(aes(x=Hour, y=Avg * 1e-3), data=dat.ucs) + geom_point() + geom_line()
ggplot(aes(x=Hour, y=Avg * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=Down, ymax=Up), color="grey") +
theme_minimal(base_size=20)
ggplot(aes(x=Hour, y=Avg * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=Down, ymax=Up), color="grey", alpha=.2) +
theme_minimal(base_size=20)
ggplot(aes(x=Hour, y=Avg * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=Down * 1e-3, ymax=Up * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20)
ups
names(forest_preds)
forest_preds[ as.Date(LoadDate) == "2009-07-29"]
forest_preds[ as.Date(forest_preds$LoadDate) == "2009-07-29"]
forest_preds[ as.Date(forest_preds$LoadDate) == "2009-07-29", ]
forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", ]
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", ])
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1])
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]))
dat.ucs
ups = mean_resids
downs =- mean_resids
kappa = sqrt( 1/.1 - 1)
for (i in 1:24)
{
ups[i] = ups[i] +  3 * sqrt( cov_resids[i, i])
downs[i] =downs[i] - 3 * sqrt(cov_resids[i, i])
}
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]))
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20)
zetas = rnorm(24, 0, 1)
C = chol(cov_resids)
? chol
C * zetas
t = C * zetas
str(t)
str(zetas)
library(MASS)
library(MASS)
zetas = mvrnorm(1, mu= mean_resids, Sigma=cov_resids)
zetas
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3))
zetas = mvrnorm(1, mu= mean_resids, Sigma=cov_resids)
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3))
zetas = mvrnorm(1, mu= mean_resids, Sigma=cov_resids)
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3))
zetas = mvrnorm(1, mu= mean_resids, Sigma=cov_resids)
#create a more useful dataframe
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3))
zetas = mvrnorm(1, mu= mean_resids, Sigma=cov_resids)
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3))
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3), color="#294EFF", linetype="dashed") +
ylab=("(GWhr)")
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3), color="#294EFF", linetype="dashed") +
ylab=("(GWhr)")
dat.ucs = data.frame(Hour=1:24, Avg = as.numeric(mean_resids),
Up = as.numeric(ups), Down=as.numeric(downs),
Preds = as.numeric(forest_preds[ as.Date(forest_preds$LoadDate) == "2011-07-29", -1]),
Vals = as.numeric(zetas) )
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + zetas)  * 1e-3), color="#294EFF", linetype="dashed") +
ylab=("(GWhr)")
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20)
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + Vals)  * 1e-3), color="#294EFF", linetype="dashed") +
ylab=("(GWhr)")
names(dat.ucs)
dat.ucs[1:5, ]
ggplot(aes(x=Hour, y=Preds * 1e-3), data=dat.ucs) +
geom_point() + geom_line() +
geom_ribbon(aes(ymin=(Preds + Down) * 1e-3,
ymax=(Preds + Up) * 1e-3), color="grey", alpha=.2) +
theme_minimal(base_size=20) +
geom_line(aes(y=(Preds + Vals)  * 1e-3),
color="#294EFF", linetype="dashed") +
ylab("(GWhr)")
